apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'war'
apply plugin: 'com.bmuschko.cargo'
apply from: 'tasks.gradle'
apply from: 'config.gradle'

/*
 * To run on WAS (at the first time), run copyConfiguration task first. (with -Penv=prod or something else)
 * */


loadConfiguration()

def loadConfiguration() {
	def environment = hasProperty('env') ? env : 'test'
	project.ext.environment = environment
}

buildscript {
    repositories {
		mavenCentral()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.3'
    }
}

processResources.dependsOn copyConfiguration

sourceCompatibility = 1.8
version = '1.0'
jar {
	manifest {
		attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
	}
}

war {
	archiveName = 'NetMiner.war'
	excludes = ['**/spring-properties-dev.xml', '**/spring-properties-test.xml']
}

compileJava {
	options.encoding = 'UTF-8'
}

eclipse {
	wtp {
		facet {
			facet name: 'jst.web', version: '3.0'
			facet name: 'java', version: '1.8'
			facet name: 'wst.jsdt.web', version: '1.0'
		}
		component {
			contextPath = '/'
		}
	}
	classpath {
		downloadSources=true
	}
}


/* 개발서버 톰캣7용. tomcat-users.xml에서 유저에게 manager-script 롤이 부여되어야 함. */
cargo {
	cargoRedeployRemote.dependsOn war // war작업을 한 다음 리디플로이함
	containerId = 'tomcat7x'
	port = 8090

	deployable {
		context = '/' // NetMiner로 배포
	}

	remote {
		hostname = '192.168.3.60' // test서버 배포
		username = 'admin'
		password = 'tkdlfka'
		containerProperties {
			property 'cargo.remote.uri', 'http://192.168.3.60:8090/tcmanager/text'
		}
	}
}
